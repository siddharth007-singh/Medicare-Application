// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id String @id @default(uuid())
  clerkUserId String @unique
  email String @unique
  name String?
  imageUrl String?
  role UserRole @default(UNASSIGNED) // UNASSIGNED, PATIENT, Doctor, ADMIN
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  //Patient realted felds
  credits Int @default(2)  // Number of credits a patient has, default is 2

  // Doctor related fields
  speciality String?
  experience String? 
  credentailUrl String? // URL to the doctor's certifications
  decscription String? @db.Text
  verificationStatus VerificationStatus? @default(PENDING) // PENDING, VERIFIED, REJECTED


  //Relations with other models
  patientAppointments Appointment[] @relation("PatientAppointments")
  doctorAppointments Appointment[] @relation("DoctorAppointments")
  availabilities Availability[] 
  transactions CreditTransaction[]
}

enum UserRole {
  UNASSIGNED
  PATIENT
  DOCTOR
  ADMIN
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}


model Availability {
  id String @id @default(uuid())
  doctorId String
  doctor User @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  startTime DateTime
  endTime DateTime
  status SlotStatus @default(AVAILABLE) // AVAILABLE, BOOKED, BLOCKED

  @@index([doctorId, startTime])
}

enum SlotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
}

model Appointment{
  id String @id @default(uuid())
  patientId String
  doctorId String
  startTime DateTime
  endTime DateTime
  status AppointmentStatus @default(SCHEDULED) 
  notes String? @db.Text // Notes from the patient or doctor
  patientDescripption String? @db.Text

  //Video Session
  videoSessionUrl String? // URL to the video session recording or link
  videoSessionToken String? // Token for accessing the video session

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient User @relation("PatientAppointments", fields: [patientId], references: [id])
  doctor User @relation("DoctorAppointments", fields: [doctorId], references: [id])

  @@index([status, startTime])
  @@index([doctorId, startTime])
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

model CreditTransaction{
  id String @id @default(uuid())
  userId String
  amount Int // Positive for credits added, negative for credits used
  type TransactionType
  packageId String? // Reference which package was purchased, if applicable
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt]) 
}

enum TransactionType {
  CREDIT_PURCHASE
  APPOINTMENT_DEDUCTION
  ADMIN_ADJUSTMENT
}